import logging
import os

from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor

from smartcontract_interaction import *
from dotenv import load_dotenv

load_dotenv()

logging.basicConfig(level=logging.INFO)

API_TOKEN = os.getenv("API_KEY")

bot = Bot(token=API_TOKEN)

storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


class Form(StatesGroup):
    first_name = State()
    second_name = State()
    third_name = State()
    benefits = State()
    documents = State()


@dp.message_handler(commands='start')
async def cmd_start(message: types.Message):
    await Form.first_name.set()
    await message.answer("–ü—Ä–∏–≤—ñ—Ç üëã \n\n "
                         "üè† –¶–µ–π –±–æ—Ç –¥–æ–ø–æ–º–æ–∂–µ –í–∞–º –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è –≤ —á–µ—Ä–≥—É –¥–æ –≥—É—Ä—Ç–æ–∂–∏—Ç–∫—É! \n\n"
                         "‚úîÔ∏è–î–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏ –í–∏ –º–∞—î—Ç–µ –Ω–∞–¥–∞—Ç–∏ —Ç–∞–∫—ñ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ: \n"
                         "<b>1.</b> –Ü–º`—è\n"
                         "<b>2.</b> –ü—Ä—ñ–∑–≤–∏—â–µ\n"
                         "<b>3.</b> –ü–æ –±–∞—Ç—å–∫–æ–≤—ñ\n"
                         "<b>4.</b> –£ —è–∫—É —á–µ—Ä–≥—É –í–∞—Å –∑–∞–ø–∏—Å—É–≤–∞—Ç–∏? (<b>–ø—ñ–ª—å–≥–æ–≤—É</b> —á–∏ –∑–≤–∏—á–∞–π–Ω—É)\n"
                         "<b>5.</b> –î–æ–∫—É–º–µ–Ω—Ç–∏ –¥–ª—è –ø–æ—Å–µ–ª–µ–Ω–Ω—è –≤ –≥—É—Ä—Ç–æ–∂–∏—Ç–æ–∫ (–±–∞–∂–∞–Ω–æ –¥–æ–¥–∞—Ç–∏ –≤ –∞—Ä—Ö—ñ–≤ –¥–∞–Ω—ñ –∑–∞—è–≤–∫–∏) üßæ \n"
                         "\t\t<b>5.1</b> (–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–∞ –ø–æ—Å–µ–ª–µ–Ω–Ω—è (–≤–∏–¥–∞–Ω–µ –∫–æ–º—ñ—Å—ñ—î—é –∑ –ø–æ—Å–µ–ª–µ–Ω–Ω—è)\n"
                         "\t\t<b>5.2</b> –ó–∞—è–≤–∞ –Ω–∞ –ø–æ—Å–µ–ª–µ–Ω–Ω—è\n"
                         "\t\t<b>5.3</b> –ö–æ–ø—ñ—è –ø–∞—Å–ø–æ—Ä—Ç–∞\n"
                         "\t\t<b>5.4</b> –ö–æ–ø—ñ—è —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ–π–Ω–æ–≥–æ –∫–æ–¥—É\n"
                         "\t\t<b>5.5</b> –§–æ—Ç–æ–∫–∞—Ä—Ç–∫–∞ 3 x 4 \n"
                         "\n"
                         "\n"
                         "–î–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ–∑–æ—Ä–æ—Å—Ç—ñ –≤—Å—ñ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –º–µ—Ä–µ–∂–∞ "
                         "<code>Rinkeby Ethereum</code>\n"
                         "https://rinkeby.etherscan.io/address/0xcec0faa3dfbcdc5c6e3de6e5c5955a65245483fb",
                         parse_mode="HTML")


# You can use state '*' if you need to handle all states
@dp.message_handler(state='*', commands='cancel')
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return

    logging.info('Cancelling state %r', current_state)
    # Cancel state and inform user about it
    await state.finish()
    await message.reply('–í—ñ–¥–º—ñ–Ω–µ–Ω–æ! ‚ùå', reply_markup=types.ReplyKeyboardRemove())


@dp.message_handler(state=Form.second_name)
async def process_second_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['first_name'] = message.text

    await Form.next()
    await message.reply("–í–≤–µ–¥—ñ—Ç—å –í–∞—à–µ –ü—Ä—ñ–∑–≤–∏—â–µ: ")


@dp.message_handler(state=Form.third_name)
async def process_third_name(message: types.Message, state: FSMContext):
    # Update state and data
    await Form.next()
    await state.update_data(second_name=message.text)
    await message.reply("–í–≤–µ–¥—ñ—Ç—å –í–∞—à–µ –ü–æ –ë–∞—Ç—å–∫–æ–≤—ñ: ")


@dp.message_handler(state=Form.benefits)
async def process_benefits(message: types.Message, state: FSMContext):
    # Update state and data
    await Form.next()
    await state.update_data(third_name=message.text)
    await message.reply("–í–≤–µ–¥—ñ—Ç—å +, —è–∫—â–æ –í–∏ —î —ñ–Ω–æ–∑–µ–º—Ü–µ–º –∞–±–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–º –∑ –ø—ñ–ª—å–≥–∞–º–∏: ")


@dp.message_handler(lambda message: "+" in message.text or "-" in message.text, state=Form.documents)
async def process_gender(message: types.Message, state: FSMContext):
    if message.text == '-':
        await state.update_data(benefits=False)
    else:
        await state.update_data(benefits=True)

    async with state.proxy() as data:
        data['documents'] = message.document
        User().create_record(message.document, Form.first_name, Form.second_name, Form.third_name, Form.benefits)

    # Finish conversation
    await state.finish()


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
